%!PS-Adobe-3.0
%%BoundingBox: 20 20 592 772
%%Title: Enscript Output
%%For: Jonathan R. Shewchuk
%%Creator: GNU enscript 1.6.4
%%CreationDate: Wed Oct  6 01:14:21 2010
%%Orientation: Landscape
%%Pages: (atend)
%%DocumentMedia: Letter 612 792 0 () ()
%%DocumentNeededResources: (atend)
%%EndComments
%%BeginProlog
%%BeginResource: procset Enscript-Prolog 1.6 4
%
% Procedures.
%

/_S {	% save current state
  /_s save def
} def
/_R {	% restore from saved state
  _s restore
} def

/S {	% showpage protecting gstate
  gsave
  showpage
  grestore
} bind def

/MF {	% fontname newfontname -> -	make a new encoded font
  /newfontname exch def
  /fontname exch def

  /fontdict fontname findfont def
  /newfont fontdict maxlength dict def

  fontdict {
    exch
    dup /FID eq {
      % skip FID pair
      pop pop
    } {
      % copy to the new font dictionary
      exch newfont 3 1 roll put
    } ifelse
  } forall

  newfont /FontName newfontname put

  % insert only valid encoding vectors
  encoding_vector length 256 eq {
    newfont /Encoding encoding_vector put
  } if

  newfontname newfont definefont pop
} def

/MF_PS { % fontname newfontname -> -	make a new font preserving its enc
  /newfontname exch def
  /fontname exch def

  /fontdict fontname findfont def
  /newfont fontdict maxlength dict def

  fontdict {
    exch
    dup /FID eq {
      % skip FID pair
      pop pop
    } {
      % copy to the new font dictionary
      exch newfont 3 1 roll put
    } ifelse
  } forall

  newfont /FontName newfontname put

  newfontname newfont definefont pop
} def

/SF { % fontname width height -> -	set a new font
  /height exch def
  /width exch def

  findfont
  [width 0 0 height 0 0] makefont setfont
} def

/SUF { % fontname width height -> -	set a new user font
  /height exch def
  /width exch def

  /F-gs-user-font MF
  /F-gs-user-font width height SF
} def

/SUF_PS { % fontname width height -> -	set a new user font preserving its enc
  /height exch def
  /width exch def

  /F-gs-user-font MF_PS
  /F-gs-user-font width height SF
} def

/M {moveto} bind def
/s {show} bind def

/Box {	% x y w h -> -			define box path
  /d_h exch def /d_w exch def /d_y exch def /d_x exch def
  d_x d_y  moveto
  d_w 0 rlineto
  0 d_h rlineto
  d_w neg 0 rlineto
  closepath
} def

/bgs {	% x y height blskip gray str -> -	show string with bg color
  /str exch def
  /gray exch def
  /blskip exch def
  /height exch def
  /y exch def
  /x exch def

  gsave
    x y blskip sub str stringwidth pop height Box
    gray setgray
    fill
  grestore
  x y M str s
} def

/bgcs { % x y height blskip red green blue str -> -  show string with bg color
  /str exch def
  /blue exch def
  /green exch def
  /red exch def
  /blskip exch def
  /height exch def
  /y exch def
  /x exch def

  gsave
    x y blskip sub str stringwidth pop height Box
    red green blue setrgbcolor
    fill
  grestore
  x y M str s
} def

% Highlight bars.
/highlight_bars {	% nlines lineheight output_y_margin gray -> -
  gsave
    setgray
    /ymarg exch def
    /lineheight exch def
    /nlines exch def

    % This 2 is just a magic number to sync highlight lines to text.
    0 d_header_y ymarg sub 2 sub translate

    /cw d_output_w cols div def
    /nrows d_output_h ymarg 2 mul sub lineheight div cvi def

    % for each column
    0 1 cols 1 sub {
      cw mul /xp exch def

      % for each rows
      0 1 nrows 1 sub {
        /rn exch def
        rn lineheight mul neg /yp exch def
        rn nlines idiv 2 mod 0 eq {
	  % Draw highlight bar.  4 is just a magic indentation.
	  xp 4 add yp cw 8 sub lineheight neg Box fill
	} if
      } for
    } for

  grestore
} def

% Line highlight bar.
/line_highlight {	% x y width height gray -> -
  gsave
    /gray exch def
    Box gray setgray fill
  grestore
} def

% Column separator lines.
/column_lines {
  gsave
    .1 setlinewidth
    0 d_footer_h translate
    /cw d_output_w cols div def
    1 1 cols 1 sub {
      cw mul 0 moveto
      0 d_output_h rlineto stroke
    } for
  grestore
} def

% Column borders.
/column_borders {
  gsave
    .1 setlinewidth
    0 d_footer_h moveto
    0 d_output_h rlineto
    d_output_w 0 rlineto
    0 d_output_h neg rlineto
    closepath stroke
  grestore
} def

% Do the actual underlay drawing
/draw_underlay {
  ul_style 0 eq {
    ul_str true charpath stroke
  } {
    ul_str show
  } ifelse
} def

% Underlay
/underlay {	% - -> -
  gsave
    0 d_page_h translate
    d_page_h neg d_page_w atan rotate

    ul_gray setgray
    ul_font setfont
    /dw d_page_h dup mul d_page_w dup mul add sqrt def
    ul_str stringwidth pop dw exch sub 2 div ul_h_ptsize -2 div moveto
    draw_underlay
  grestore
} def

/user_underlay {	% - -> -
  gsave
    ul_x ul_y translate
    ul_angle rotate
    ul_gray setgray
    ul_font setfont
    0 0 ul_h_ptsize 2 div sub moveto
    draw_underlay
  grestore
} def

% Page prefeed
/page_prefeed {		% bool -> -
  statusdict /prefeed known {
    statusdict exch /prefeed exch put
  } {
    pop
  } ifelse
} def

% Wrapped line markers
/wrapped_line_mark {	% x y charwith charheight type -> -
  /type exch def
  /h exch def
  /w exch def
  /y exch def
  /x exch def

  type 2 eq {
    % Black boxes (like TeX does)
    gsave
      0 setlinewidth
      x w 4 div add y M
      0 h rlineto w 2 div 0 rlineto 0 h neg rlineto
      closepath fill
    grestore
  } {
    type 3 eq {
      % Small arrows
      gsave
        .2 setlinewidth
        x w 2 div add y h 2 div add M
        w 4 div 0 rlineto
        x w 4 div add y lineto stroke

        x w 4 div add w 8 div add y h 4 div add M
        x w 4 div add y lineto
	w 4 div h 8 div rlineto stroke
      grestore
    } {
      % do nothing
    } ifelse
  } ifelse
} def

% EPSF import.

/BeginEPSF {
  /b4_Inc_state save def    		% Save state for cleanup
  /dict_count countdictstack def	% Count objects on dict stack
  /op_count count 1 sub def		% Count objects on operand stack
  userdict begin
  /showpage { } def
  0 setgray 0 setlinecap
  1 setlinewidth 0 setlinejoin
  10 setmiterlimit [ ] 0 setdash newpath
  /languagelevel where {
    pop languagelevel
    1 ne {
      false setstrokeadjust false setoverprint
    } if
  } if
} bind def

/EndEPSF {
  count op_count sub { pos } repeat	% Clean up stacks
  countdictstack dict_count sub { end } repeat
  b4_Inc_state restore
} bind def

% Check PostScript language level.
/languagelevel where {
  pop /gs_languagelevel languagelevel def
} {
  /gs_languagelevel 1 def
} ifelse
%%EndResource
%%BeginResource: procset Enscript-Encoding-88591 1.6 4
/encoding_vector [
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/space        	/exclam       	/quotedbl     	/numbersign   	
/dollar       	/percent      	/ampersand    	/quoteright   	
/parenleft    	/parenright   	/asterisk     	/plus         	
/comma        	/hyphen       	/period       	/slash        	
/zero         	/one          	/two          	/three        	
/four         	/five         	/six          	/seven        	
/eight        	/nine         	/colon        	/semicolon    	
/less         	/equal        	/greater      	/question     	
/at           	/A            	/B            	/C            	
/D            	/E            	/F            	/G            	
/H            	/I            	/J            	/K            	
/L            	/M            	/N            	/O            	
/P            	/Q            	/R            	/S            	
/T            	/U            	/V            	/W            	
/X            	/Y            	/Z            	/bracketleft  	
/backslash    	/bracketright 	/asciicircum  	/underscore   	
/quoteleft    	/a            	/b            	/c            	
/d            	/e            	/f            	/g            	
/h            	/i            	/j            	/k            	
/l            	/m            	/n            	/o            	
/p            	/q            	/r            	/s            	
/t            	/u            	/v            	/w            	
/x            	/y            	/z            	/braceleft    	
/bar          	/braceright   	/tilde        	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/space        	/exclamdown   	/cent         	/sterling     	
/currency     	/yen          	/brokenbar    	/section      	
/dieresis     	/copyright    	/ordfeminine  	/guillemotleft	
/logicalnot   	/hyphen       	/registered   	/macron       	
/degree       	/plusminus    	/twosuperior  	/threesuperior	
/acute        	/mu           	/paragraph    	/bullet       	
/cedilla      	/onesuperior  	/ordmasculine 	/guillemotright	
/onequarter   	/onehalf      	/threequarters	/questiondown 	
/Agrave       	/Aacute       	/Acircumflex  	/Atilde       	
/Adieresis    	/Aring        	/AE           	/Ccedilla     	
/Egrave       	/Eacute       	/Ecircumflex  	/Edieresis    	
/Igrave       	/Iacute       	/Icircumflex  	/Idieresis    	
/Eth          	/Ntilde       	/Ograve       	/Oacute       	
/Ocircumflex  	/Otilde       	/Odieresis    	/multiply     	
/Oslash       	/Ugrave       	/Uacute       	/Ucircumflex  	
/Udieresis    	/Yacute       	/Thorn        	/germandbls   	
/agrave       	/aacute       	/acircumflex  	/atilde       	
/adieresis    	/aring        	/ae           	/ccedilla     	
/egrave       	/eacute       	/ecircumflex  	/edieresis    	
/igrave       	/iacute       	/icircumflex  	/idieresis    	
/eth          	/ntilde       	/ograve       	/oacute       	
/ocircumflex  	/otilde       	/odieresis    	/divide       	
/oslash       	/ugrave       	/uacute       	/ucircumflex  	
/udieresis    	/yacute       	/thorn        	/ydieresis    	
] def
%%EndResource
%%EndProlog
%%BeginSetup
%%IncludeResource: font Courier-Bold
%%IncludeResource: font Courier
/HFpt_w 10 def
/HFpt_h 10 def
/Courier-Bold /HF-gs-font MF
/HF /HF-gs-font findfont [HFpt_w 0 0 HFpt_h 0 0] makefont def
/Courier /F-gs-font MF
/F-gs-font 7 7 SF
/#copies 1 def
% Pagedevice definitions:
gs_languagelevel 1 gt {
  <<
    /PageSize [612 792] 
  >> setpagedevice
} if
%%BeginResource: procset Enscript-Header-enscript 1.6 4
%%IncludeResource: font Times-Bold
%%IncludeResource: font Times-Roman

% Fonts.
/Times-Bold /HeaderFont-Bold MF
/HeaderDateF /HeaderFont-Bold findfont 12 scalefont def

/Times-Roman /HeaderFont-Times MF
/HeaderHDRF /HeaderFont-Times findfont 14 scalefont def

/HeaderPageNumF /Helvetica-Bold findfont 28.8 scalefont def

/do_header {	% print enscript header
  gsave
    d_header_x d_header_y translate

    % light bar
    0 0 d_header_w d_header_h 2 div Box
    .95 setgray fill

    % dark gray boxes
    /dbw d_header_h 2 mul def	% dark box width
    /dbc .7 def			% dark box color

    % left dark box.
    0 0 dbw d_header_h Box
    dbc setgray fill

    0 setgray 
    HeaderDateF setfont
    moddatestr dup stringwidth pop dbw exch sub 2 div 
    d_header_h 2 div 2 add moveto show
    modtimestr dup stringwidth pop dbw exch sub 2 div 
    d_header_h 5 div moveto show

    % right dark box
    d_header_w dbw sub 0 dbw d_header_h Box
    dbc setgray fill

    HeaderPageNumF setfont
    1 setgray
    pagenumstr dup
    stringwidth pop dbw exch sub 2 div d_header_w dbw sub add
    d_header_h .2 mul moveto show

    % filename
    0 setgray 
    HeaderHDRF setfont
    d_header_w fname stringwidth pop sub 2 div d_header_h 8 div moveto
    fname show

    % user supplied header string.
    user_header_p {
      /h d_header_h 8 div 5 mul def

      % Implement strict enscript compatibility.
      user_header_center_str () eq user_header_right_str () eq and {
        d_header_w user_header_left_str stringwidth pop sub 2 div 
        h moveto user_header_left_str show
      } {
        dbw 5 add h moveto user_header_left_str show

        d_header_w user_header_center_str stringwidth pop sub 2 div 
        h moveto user_header_center_str show

	d_header_w dbw sub 5 sub user_header_right_str stringwidth pop
	sub h moveto user_header_right_str show
      } ifelse
    } if

  grestore
} def
%%EndResource
/d_page_w 752 def
/d_page_h 572 def
/d_header_x 0 def
/d_header_y 536 def
/d_header_w 752 def
/d_header_h 36 def
/d_footer_x 0 def
/d_footer_y 0 def
/d_footer_w 752 def
/d_footer_h 0 def
/d_output_w 752 def
/d_output_h 536 def
/cols 2 def
%%EndSetup
%%Page: (1) 1
%%BeginPageSetup
_S
90 rotate
20 -592 translate
/pagenum 1 def
/fname (readme) def
/fdir () def
/ftail (readme) def
% User defined strings:
/pagenumstr (1) def
/moddatestr (10/06/10) def
/modtimestr (01:14:19) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
column_lines
do_header
5 526 M
(                               CS 61B Project 2) s
5 518 M
(                              Network \(The Game\)) s
5 510 M
(                       Due 5pm Friday, October 29, 2010) s
5 502 M
(                   Interface design due in lab October 12-13) s
5 486 M
(Warning:  This project is substantially more time-consuming than Project 1.) s
5 478 M
(          Start early.) s
5 462 M
(This is a team project.  Form a team of 2 or 3 people.  No teams of 1 or teams) s
5 454 M
(of 4 or more are allowed.  Your project partners do NOT have to be in your lab.) s
5 438 M
(Copy the Project 2 directory by doing the following, starting from your home) s
5 430 M
(directory.) s
5 414 M
(    cp -r ~cs61b/hw/pj2 .) s
5 406 M
(    cd pj2) s
5 390 M
(Suggested Timeline \(if you want to finish on time\)) s
5 382 M
(==================) s
5 374 M
(Design the classes, modules, and interfaces \(see "Teamwork"\).      October 11) s
5 366 M
(Have working code for the easier modules.                          October 17) s
5 358 M
(Have working code for identifying a network; progress on search.   October 24) s
5 350 M
(Finish project.                                                    October 29) s
5 334 M
(Network) s
5 326 M
(=======) s
5 318 M
(In this project you will implement a program that plays the game Network) s
5 310 M
(against a human player or another computer program.  Network is played on an) s
5 302 M
(8-by-8 board.  There are two players, "Black" and "White."  Each player has ten) s
5 294 M
(chips of its own color to place on the board.  White moves first.) s
5 278 M
(                 -----------------------------------------) s
5 270 M
(                 |    | 10 | 20 | 30 | 40 | 50 | 60 |    |) s
5 262 M
(                 -----------------------------------------) s
5 254 M
(                 | 01 | 11 | 21 | 31 | 41 | 51 | 61 | 71 |) s
5 246 M
(                 -----------------------------------------) s
5 238 M
(                 | 02 | 12 | 22 | 32 | 42 | 52 | 62 | 72 |) s
5 230 M
(                 -----------------------------------------) s
5 222 M
(                 | 03 | 13 | 23 | 33 | 43 | 53 | 63 | 73 |) s
5 214 M
(                 -----------------------------------------) s
5 206 M
(                 | 04 | 14 | 24 | 34 | 44 | 54 | 64 | 74 |) s
5 198 M
(                 -----------------------------------------) s
5 190 M
(                 | 05 | 15 | 25 | 35 | 45 | 55 | 65 | 75 |) s
5 182 M
(                 -----------------------------------------) s
5 174 M
(                 | 06 | 16 | 26 | 36 | 46 | 56 | 66 | 76 |) s
5 166 M
(                 -----------------------------------------) s
5 158 M
(                 |    | 17 | 27 | 37 | 47 | 57 | 67 |    |) s
5 150 M
(                 -----------------------------------------) s
5 134 M
(The board has four goal areas:  the top row, the bottom row, the left column,) s
5 126 M
(and the right column.  Black's goal areas are squares 10, 20, 30, 40, 50, 60) s
5 118 M
(and 17, 27, 37, 47, 57, 67.  Only Black may place chips in these areas.) s
5 110 M
(White's goal areas are 01, 02, 03, 04, 05, 06 and 71, 72, 73, 74, 75, 76; only) s
5 102 M
(White may play there.  The corner squares--00, 70, 07, and 77--are dead;) s
5 94 M
(neither player may use them.  Either player may place a chip in any square not) s
5 86 M
(on the board's border.) s
381 518 M
(Object of Play) s
381 510 M
(==============) s
381 502 M
(Each player tries to complete a "network" joining its two goal areas.) s
381 494 M
(A network is a sequence of six or more chips that starts in one of the player's) s
381 486 M
(goal areas and terminates in the other.  Each consecutive pair of chips in the) s
381 478 M
(sequence are connected to each other along straight lines, either orthogonally) s
381 470 M
(\(left, right, up, down\) or diagonally.) s
381 454 M
(The diagram below shows a winning configuration for Black.  \(There should be) s
381 446 M
(White chips on the board as well, but for clarity these are not shown.\)  Here) s
381 438 M
(are two winning black networks.  Observe that the second one crosses itself.) s
381 422 M
(    60 - 65 - 55 - 33 - 35 - 57) s
381 414 M
(    20 - 25 - 35 - 13 - 33 - 55 - 57) s
381 398 M
(                 -----------------------------------------) s
381 390 M
(                 |    |    | BB |    |    |    | BB |    | _0) s
381 382 M
(                 -----------------------------------------) s
381 374 M
(                 |    |    |    |    |    |    |    |    | _1) s
381 366 M
(                 -----------------------------------------) s
381 358 M
(                 |    |    |    |    | BB |    |    |    | _2) s
381 350 M
(                 -----------------------------------------) s
381 342 M
(                 |    | BB |    | BB |    |    |    |    | _3) s
381 334 M
(                 -----------------------------------------) s
381 326 M
(                 |    |    |    |    |    |    |    |    | _4) s
381 318 M
(                 -----------------------------------------) s
381 310 M
(                 |    |    | BB | BB |    | BB | BB |    | _5) s
381 302 M
(                 -----------------------------------------) s
381 294 M
(                 |    |    |    |    |    |    |    |    | _6) s
381 286 M
(                 -----------------------------------------) s
381 278 M
(                 |    |    | BB |    |    | BB |    |    | _7) s
381 270 M
(                 -----------------------------------------) s
381 262 M
(                   0_   1_   2_   3_   4_   5_   6_   7_) s
381 246 M
(An enemy chip placed in the straight line between two chips breaks the) s
381 238 M
(connection.  In the second network listed above, a white chip in square 56) s
381 230 M
(would break the connection to Black's lower goal.) s
381 214 M
(Although more than one chip may be placed in a goal area, a network can have) s
381 206 M
(only two chips in the goal areas:  the first and last chips in the network.) s
381 198 M
(Neither of the following are networks, because they both make use of two chips) s
381 190 M
(in the upper goal.) s
381 174 M
(    60 - 20 - 42 - 33 - 35 - 57) s
381 166 M
(    20 - 42 - 60 - 65 - 55 - 57) s
381 150 M
(A network cannot pass through the same chip twice, even if it is only counted) s
381 142 M
(once.  For that reason the following is not a network.) s
381 126 M
(    20 - 25 - 35 - 33 - 55 - 35 - 57) s
381 110 M
(A network cannot pass through a chip without turning a corner.  Because of the) s
381 102 M
(chip in square 42, the following is not a network.) s
381 86 M
(    60 - 42 - 33 - 35 - 25 - 27) s
_R
S
%%Page: (2) 2
%%BeginPageSetup
_S
90 rotate
20 -592 translate
/pagenum 2 def
/fname (readme) def
/fdir () def
/ftail (readme) def
% User defined strings:
/pagenumstr (2) def
/moddatestr (10/06/10) def
/modtimestr (01:14:19) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
column_lines
do_header
5 518 M
(Legal Moves) s
5 510 M
(===========) s
5 502 M
(To begin the game, choose who is Black and who is White in any manner \(we use a) s
5 494 M
(random number generator\).  The players alternate taking turns, with White) s
5 486 M
(moving first.) s
5 470 M
(The first three rules of legal play are fairly simple.) s
5 462 M
(  1\)  No chip may be placed in any of the four corners. ) s
5 454 M
(  2\)  No chip may be placed in a goal of the opposite color.) s
5 446 M
(  3\)  No chip may be placed in a square that is already occupied.) s
5 430 M
(The fourth rule is a bit trickier.) s
5 422 M
(  4\)  A player may not have more than two chips in a connected group, whether) s
5 414 M
(      connected orthogonally or diagonally.) s
5 398 M
(This fourth rule means that you cannot have three or more chips of the same) s
5 390 M
(color in a cluster.  A group of three chips form a cluster if one of them is) s
5 382 M
(adjacent to the other two.  In the following diagram, Black is not permitted to) s
5 374 M
(place a chip in any of the squares marked with an X, because doing so would) s
5 366 M
(form a group of 3 or more chips.  \(Of course, the far left and right columns) s
5 358 M
(are also off-limits to Black.\)) s
5 342 M
(                 -----------------------------------------) s
5 334 M
(                 |    |  X |  X | BB |  X |    |    |    |) s
5 326 M
(                 -----------------------------------------) s
5 318 M
(                 |    |  X | BB |  X |  X |  X |  X |    |) s
5 310 M
(                 -----------------------------------------) s
5 302 M
(                 |    |  X |  X |  X |  X | BB |  X |    |) s
5 294 M
(                 -----------------------------------------) s
5 286 M
(                 |    |    |    |    |  X | BB |  X |    |) s
5 278 M
(                 -----------------------------------------) s
5 270 M
(                 |    |    | BB |    |  X |  X |  X |    |) s
5 262 M
(                 -----------------------------------------) s
5 254 M
(                 |    |  X |  X |    |    |    | BB |    |) s
5 246 M
(                 -----------------------------------------) s
5 238 M
(                 |    | BB |    |    |    |  X |    |    |) s
5 230 M
(                 -----------------------------------------) s
5 222 M
(                 |    |    |    |    | BB |    |    |    |) s
5 214 M
(                 -----------------------------------------) s
5 198 M
(There are two kinds of moves:  add moves and step moves.  In an add move, a) s
5 190 M
(player places a chip on the board \(following the rules above\).  Each player has) s
5 182 M
(ten chips, and only add moves are permitted until those chips are exhausted.) s
5 174 M
(If neither player has won when all twenty chips are on the board, the rest of) s
5 166 M
(the game comprises step moves.  In a step move, a player moves a chip to a) s
5 158 M
(different square, subject to the same restrictions.  A player is not permitted) s
5 150 M
(to decline to move a piece \(nor to "move from square ij to square ij"\).) s
5 134 M
(A step move may create a network for the opponent by unblocking a connection) s
5 126 M
(between two enemy chips.  If the step move breaks the network at some other) s
5 118 M
(point, the enemy does not win, but if the network is still intact when the chip) s
5 110 M
(has been placed back on the board, the player taking the step move loses.  If a) s
5 102 M
(player makes a move that results in both players completing a network, the) s
5 94 M
(other player wins.) s
5 78 M
(To make sure you understand the rules, try playing a few games against your) s
5 70 M
(project partners.  See the instructions in "Running Network" below.  Or, use) s
5 62 M
(ten pennies, ten silver coins, and a checkerboard.) s
5 46 M
(Bibliographic note:  Network is taken from Sid Sackson, "A Gamut of Games,") s
5 38 M
(Dover Publications \(New York\), 1992.) s
381 518 M
(Your Task) s
381 510 M
(=========) s
381 502 M
(Your job is to implement a MachinePlayer class that plays Network well.  One) s
381 494 M
(subtask is to write a method that identifies legal moves; another subtask is to) s
381 486 M
(write a method that finds a move that is likely to win the game.) s
381 470 M
(The MachinePlayer class is in the player package and extends the abstract) s
381 462 M
(Player class, which defines the following methods.) s
381 446 M
(  // Returns a new move by "this" player.  Internally records the move \(updates) s
381 438 M
(  // the internal game board\) as a move by "this" player.) s
381 430 M
(  public Move chooseMove\(\);) s
381 414 M
(  // If the Move m is legal, records the move as a move by the opponent) s
381 406 M
(  // \(updates the internal game board\) and returns true.  If the move is) s
381 398 M
(  // illegal, returns false without modifying the internal state of "this") s
381 390 M
(  // player.  This method allows your opponents to inform you of their moves.) s
381 382 M
(  public boolean opponentMove\(Move m\);) s
381 366 M
(  // If the Move m is legal, records the move as a move by "this" player) s
381 358 M
(  // \(updates the internal game board\) and returns true.  If the move is) s
381 350 M
(  // illegal, returns false without modifying the internal state of "this") s
381 342 M
(  // player.  This method is used to help set up "Network problems" for your) s
381 334 M
(  // player to solve.) s
381 326 M
(  public boolean forceMove\(Move m\);) s
381 310 M
(In addition to the methods above, implement two constructors for MachinePlayer.) s
381 294 M
(  // Creates a machine player with the given color.  Color is either 0 \(black\)) s
381 286 M
(  // or 1 \(white\).  \(White has the first move.\)) s
381 278 M
(  public MachinePlayer\(int color\)) s
381 262 M
(  // Creates a machine player with the given color and search depth.  Color is) s
381 254 M
(  // either 0 \(black\) or 1 \(white\).  \(White has the first move.\)) s
381 246 M
(  public MachinePlayer\(int color, int searchDepth\)) s
381 230 M
(As usual, do not change the signatures of any of these methods; they are your) s
381 222 M
(interface to other players.  You may add helper methods.) s
381 206 M
(Your MachinePlayer must record enough internal state, including the current) s
381 198 M
(board configuration, so that chooseMove\(\) can choose a good \(or at the very) s
381 190 M
(least, legal\) move.  In a typical game, two players and a referee each have) s
381 182 M
(their own internal representation of the board.  If all the implementations are) s
381 174 M
(free of bugs, they all have the same idea of what the board looks like,) s
381 166 M
(although each of the three uses different data structures.  The referee keeps) s
381 158 M
(its own copy to prevent malicious or buggy players from cheating or corrupting) s
381 150 M
(the board.  If your MachinePlayer is buggy and attempts to make an illegal) s
381 142 M
(move, the referee will grant the win to your opponent.) s
381 126 M
(Most of your work will be implementing chooseMove\(\).  You will be implementing) s
381 118 M
(the minimax algorithm for searching game trees, described in Lecture 18.) s
381 110 M
(A game tree is a mapping of all possible moves you can make, and all possible) s
381 102 M
(responses by your opponent, and all possible responses by you, and so on to a) s
381 94 M
(specified "search depth."  You will NOT need to implement a tree data) s
381 86 M
(structure; a "game tree" is the structure of a set of recursive method calls.) s
381 70 M
(The forceMove\(\) method forces your player to make a specified move.  It is for) s
381 62 M
(testing and grading.  We can set up particular board configurations by) s
381 54 M
(constructing a MachinePlayer and making an alternating series of forceMove\(\)) s
381 46 M
(and opponentMove\(\) calls to put the board in the desired configuration.  Then) s
381 38 M
(we will call chooseMove\(\) to ensure that your MachinePlayer makes a good) s
381 30 M
(choice.) s
381 14 M
(The second MachinePlayer constructor, whose second parameter searchDepth is the) s
381 6 M
(chosen search depth, is also used for debugging and testing your code.) s
_R
S
%%Page: (3) 3
%%BeginPageSetup
_S
90 rotate
20 -592 translate
/pagenum 3 def
/fname (readme) def
/fdir () def
/ftail (readme) def
% User defined strings:
/pagenumstr (3) def
/moddatestr (10/06/10) def
/modtimestr (01:14:19) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
column_lines
do_header
5 526 M
(A search depth of one implies that your MachinePlayer considers all the moves) s
5 518 M
(and chooses the one that yields the "best" board.  A search depth of two) s
5 510 M
(implies that you consider your opponent's response as well, and choose the move) s
5 502 M
(that will yield the "best" board after your opponent makes the best move) s
5 494 M
(available to it.  A search depth of three implies that you consider two) s
5 486 M
(MachinePlayer moves and one opponent move between them.) s
5 470 M
(The first MachinePlayer constructor should create a MachinePlayer whose search) s
5 462 M
(depth you have chosen so that it always returns a move within five seconds.) s
5 454 M
(\(This precise time limit will only be important for the Network tournament late) s
5 446 M
(in the semester.\)  The second MachinePlayer constructor MUST always create a) s
5 438 M
(MachinePlayer that searches to exactly the specified search depth.) s
5 422 M
(You may want to design the MachinePlayer constructed by your first constructor) s
5 414 M
(so that it searches to a variable depth.  In particular, you will almost) s
5 406 M
(certainly want to reduce your search depth for step moves, because there are) s
5 398 M
(many more possible step moves than add moves, and a search depth that is fast) s
5 390 M
(for add moves will be very slow for step moves.) s
5 374 M
(The Move class in Move.java is a container for storing the fields needed to) s
5 366 M
(define one move in Network.  It is not an ADT and it has no interesting) s
5 358 M
(invariants, so all its fields are public.  It is part of the interface of your) s
5 350 M
(MachinePlayer, and it is how your MachinePlayer communicates with other) s
5 342 M
(programs, so you cannot change Move.java in any way.  If you would like to have) s
5 334 M
(additional methods or fields, feel free to extend the Move class; your) s
5 326 M
(MachinePlayer may return subclasses of Move without any fear.) s
5 310 M
(Strategy) s
5 302 M
(========) s
5 294 M
(Where should you start?  First, design the structure of your program \(see) s
5 286 M
("Teamwork" below\).  Then begin by writing a relatively simple MachinePlayer) s
5 278 M
(class that simply chooses some correct move, no matter how bad.  These actions) s
5 270 M
(will give you partial credit on the project.  Based on that foundation, you can) s
5 262 M
(implement something more sophisticated that incorporates strategy.) s
5 246 M
(Game trees rely on an "evaluation function" that assigns a score to each board) s
5 238 M
(that estimates how well your MachinePlayer is doing.  An evaluation function is) s
5 230 M
(necessary because it is rarely possible to search all the way to the end of the) s
5 222 M
(game.  You need to estimate your odds of winning if you make a particular move.) s
5 214 M
(Your evaluation function should assign a maximum positive score to a win by) s
5 206 M
(your MachinePlayer, and a minimum negative score to a win by the opponent.) s
5 190 M
(Assign an intermediate score to a board where neither player has completed a) s
5 182 M
(network.  One of the most important but difficult parts of implementing game) s
5 174 M
(search is inventing a board evaluation function that reliably evaluates these) s
5 166 M
(intermediate boards.  For example, a rough evaluation function might count how) s
5 158 M
(many pairs of your chips can see each other, and subtract the opponent's pairs.) s
5 150 M
(A slightly better evaluation function would also try to establish at least one) s
5 142 M
(chip in each goal early in the game.  I leave you to your own wits to improve) s
5 134 M
(upon these ideas.) s
5 118 M
(You should assign a slightly higher score to a win in one move than to a win in) s
5 110 M
(three moves, which should get a higher score that a win in five moves, and so) s
5 102 M
(on.  Otherwise, your MachinePlayer might always choose the win in three over) s
5 94 M
(the win in one, move after move, and never get around to actually winning.) s
5 78 M
(You will need to invent an algorithm that determines whether a player has a) s
5 70 M
(winning network.  A good place to look for clues is Section 13.3 of Goodrich) s
5 62 M
(and Tamassia, which describes depth-first search in graphs.  It's not quite) s
5 54 M
(what you need for the job, but close enough that you'll be able to modify it.) s
5 38 M
(To earn full credit, you must implement alpha-beta search, which is discussed) s
5 30 M
(in Lecture 18.  Alpha-beta search is a technique for "pruning" a game tree, so) s
5 22 M
(you don't need to search the entire tree.  Alpha-beta search can be) s
5 14 M
(significantly faster than naive tree search.  You can earn partial credit by) s
5 6 M
(implementing game tree search without pruning.  If you can't get that working,) s
381 526 M
(you can earn a little bit of partial credit by looking ahead one move.) s
381 510 M
(You will almost certainly want to create a separate class to represent game) s
381 502 M
(boards internally.  One decision you will have to make is whether to create) s
381 494 M
(a new game board or change an existing one each time you consider a move.  The) s
381 486 M
(latter choice is faster, but it could cause hard-to-solve bugs if you're not) s
381 478 M
(extremely careful about how and when you manipulate game boards.) s
381 462 M
(Late in the semester, we will hold a tournament pitting student MachinePlayers) s
381 454 M
(against each other.  Participation in the tournament is optional and does not) s
381 446 M
(affect your grade.  You will submit your contestant several weeks after the) s
381 438 M
(Project 2 due date, so you will have time to improve your MachinePlayer's) s
381 430 M
(evaluation function and strategy in November.  During the tournament, we will) s
381 422 M
(strictly enforce a time limit of five seconds \(which will be checked by our) s
381 414 M
(refereeing software\) on the time to perform one chooseMove\(\).  The winning team) s
381 406 M
(will receive gift certificates to Amoeba Music.) s
381 390 M
(This is a difficult project.  Do not wait to start working on it.  If you don't) s
381 382 M
(have the code that identifies legal moves implemented by October 17, you) s
381 374 M
(would be well advised to wallow in neurotic spasms of fear and worry.  We will) s
381 366 M
(have autograder software set up to test your submitted code for legal moves.) s
381 350 M
(Teamwork \(10% of project grade\) \(show to your TA in Lab 7, October 12 or 13\)) s
381 342 M
(========) s
381 334 M
(Before you start programming, read the Lecture 17 notes carefully, then break) s
381 326 M
(the project up into multiple modules \(tasks\).  Decide what high-level methods) s
381 318 M
(and classes must be implemented, define the interfaces by which these methods) s
381 310 M
(and classes will communicate, and divide up the work among your team.  Some) s
381 302 M
(possible modules \(these seem reasonably modular\) are) s
381 294 M
(  1\)  determining whether a move is valid,) s
381 286 M
(  2\)  generating a list of all valid moves,) s
381 278 M
(  3\)  finding the chips \(of the same color\) that form connections with a chip,) s
381 270 M
(  4\)  determining whether a game board contains any networks for a given) s
381 262 M
(      player,) s
381 254 M
(  5\)  computing an evaluation function for a board, and) s
381 246 M
(  6\)  performing minimax tree search.) s
381 230 M
(The file GRADER provided in the pj2 directory includes a questionnaire, which) s
381 222 M
(you are required to submit.  Once you've worked out your classes, modules, and) s
381 214 M
(interfaces, write them down at the bottom of GRADER.  Your description should) s
381 206 M
(include:) s
381 198 M
(  -  A list of the classes your program will need.) s
381 190 M
(  -  A list of each of the "modules" used in or by MachinePlayer, which might) s
381 182 M
(     be similar to, but more detailed, than the list above.) s
381 174 M
(  -  For each module, list the class\(es\) the module will be implemented in.) s
381 166 M
(     It may \(or may not\) make it easier for you to work as a team if each) s
381 158 M
(     module is in a separate class.) s
381 150 M
(  -  For each module, describe its interface--specifically, the prototype and) s
381 142 M
(     behavior of each method that is available for external callers \(outside) s
381 134 M
(     the module\) to call.  Don't include methods that are only meant to be) s
381 126 M
(     called from within the module.  For each method, provide \(1\) a method) s
381 118 M
(     prototype and \(2\) a complete, unambiguous description of the behavior of) s
381 110 M
(     the method/module.  \(This description will also appear before the method) s
381 102 M
(     in your code's comments.\)) s
381 94 M
(  -  Who is assigned the task of implementing each module?) s
381 78 M
(If you have defined your classes, modules, and module interfaces well, you) s
381 70 M
(should be able to implement any one of the modules without having decided how) s
381 62 M
(to implement any of the others.  This will allow you to divide up the chores) s
381 54 M
(and work quickly as a team.  See the Lecture 17 notes for details.) s
381 38 M
(You should have a draft of your GRADER file ready to show your TA in Lab 7) s
381 30 M
(\(October 12/13\).  Your Lab 7 score depends on having a finished draft of your) s
381 22 M
(modules and interfaces.  Your TA will comment on your design decisions.) s
381 6 M
(You may change some of your design decisions based on your TA's feedback, and) s
_R
S
%%Page: (4) 4
%%BeginPageSetup
_S
90 rotate
20 -592 translate
/pagenum 4 def
/fname (readme) def
/fdir () def
/ftail (readme) def
% User defined strings:
/pagenumstr (4) def
/moddatestr (10/06/10) def
/modtimestr (01:14:19) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
column_lines
do_header
5 526 M
(you will probably make other changes as you program.  Be sure to update your) s
5 518 M
(GRADER to reflect these changes.  The GRADER file you submit with this project) s
5 510 M
(should reflect the FINAL decisions you make about modules and interfaces.) s
5 494 M
(Before you submit, make sure your GRADER file tells us who _actually_) s
5 486 M
(implemented each portion of your project.  Although you must hand in GRADER) s
5 478 M
(with your project, you must also hand in a printed version of GRADER on which) s
5 470 M
(you have written "This is a truthful statement of how we divided the labor for) s
5 462 M
(this project."  ALL of your team members must put their signatures under this) s
5 454 M
(statement.  This statement is due the Monday after the project deadline.  You) s
5 446 M
(will not receive a grade if you don't turn it in.) s
5 430 M
(Your design of classes and interfaces with be worth about 10% of your project) s
5 422 M
(grade.) s
5 406 M
(Running Network) s
5 398 M
(===============) s
5 390 M
(You can run Network from your pj2 directory in several ways.) s
5 374 M
(  java Network human random) s
5 366 M
(    This pits you against a very naive machine player that makes random legal) s
5 358 M
(    moves.  Use this to learn to play the game.  The human plays white and the) s
5 350 M
(    random player play black.  To reverse colors, swap "human" and "random".) s
5 334 M
(  java Network human human) s
5 326 M
(    Compete against your project partner.) s
5 310 M
(  java Network human machine) s
5 302 M
(    Compete against your MachinePlayer.) s
5 286 M
(  java Network machine random) s
5 278 M
(    Your MachinePlayer competes against the random player.) s
5 262 M
(  java Network machine machine) s
5 254 M
(    Your MachinePlayer competes against itself.) s
5 238 M
(All the combinations of "machine", "human", and "random" work.  It's) s
5 230 M
(particularly amusing to pit two random players against each other.) s
5 214 M
(If you put a "-q" switch right after the word "Network", Network will quit) s
5 206 M
(immediately when the game ends.  This can be useful for batch testing.) s
5 190 M
(Submitting your Solution) s
5 182 M
(========================) s
5 174 M
(Be sure that you have updated all your answers in GRADER before submitting.) s
5 166 M
(Don't forget that it's worth 10% of your grade.) s
5 150 M
(Designate one member of your team to submit the project.  If you resubmit, the) s
5 142 M
(project should always be submitted by the same student.  If for some reason a) s
5 134 M
(different partner must submit \(because the designated member is out of town,) s
5 126 M
(for instance\), you must send cs61b@cory.eecs a listing of your team members,) s
5 118 M
(explaining which of them have submitted the project and why.  Let us know which) s
5 110 M
(submission you want graded.  If you've submitted your project once, or even) s
5 102 M
(written a substantial amount of code together, you may not change partners) s
5 94 M
(without the permission of the instructor.) s
5 78 M
(The designated teammate only:  change \(cd\) to your pj2 directory, which should) s
5 70 M
(contain the player directory \(i.e. the player package\), which should contain) s
5 62 M
(your MachinePlayer.java and other Java files.  You may also submit other) s
5 54 M
(packages in your pj2 directory \(e.g. a list package\).  Type "submit pj2".) s
5 46 M
(The submit program will not submit Move.java and Player.java, because you're) s
5 38 M
(not allowed to change them.) s
381 518 M
(Grading) s
381 510 M
(=======) s
381 502 M
(Your project will be graded in part on correctness and the quality of moves) s
381 494 M
(chosen by chooseMove\(\).  This grading will be done using automatic test cases.) s
381 486 M
(Be sure the following statements apply to your chooseMove\(\).) s
381 470 M
(  1\)  forceMove and opponentMove return true if the given move is legal.) s
381 462 M
(  2\)  forceMove and opponentMove return false if the given move is illegal.) s
381 454 M
(  3\)  chooseMove returns only legal moves.) s
381 446 M
(  4\)  If a winning move exists, chooseMove selects one.  \(This will happen) s
381 438 M
(      automatically if you are searching one level of the game tree.\)) s
381 430 M
(  5\)  If you cannot win in this step, but can prevent your opponent from) s
381 422 M
(      winning during its next move, chooseMove selects a move that does this.) s
381 414 M
(      \(This will happen automatically if you are searching two levels of the) s
381 406 M
(      game tree.\)) s
381 398 M
(  6\)  Your player can beat the random player almost every time.  Any reasonable) s
381 390 M
(      search strategy and evaluation function should accomplish this.) s
381 374 M
(You will also be graded on style, documentation, efficiency, and the use of) s
381 366 M
(encapsulation.) s
381 350 M
(  1\)  Each method must be preceded by a comment describing its behavior) s
381 342 M
(      unambiguously.  These comments must include descriptions of what each) s
381 334 M
(      parameter is for, and what the method returns \(if anything\).) s
381 326 M
(      They must also include a description of what the method does \(though) s
381 318 M
(      not necessarily how it does it\) detailed enough that somebody else could) s
381 310 M
(      implement a method that does the same thing from scratch, using only the) s
381 302 M
(      comments and this readme file.) s
381 286 M
(      Some methods serve as entry points to the modules you designed when) s
381 278 M
(      you began the project.  The prototypes and behavioral descriptions of) s
381 270 M
(      these methods are interfaces, and should be included in GRADER.) s
381 262 M
(  2\)  All classes, fields, and methods must have the proper public/private/) s
381 254 M
(      protected/package qualifier.  We will deduct points if you make things) s
381 246 M
(      public that could conceivably allow a user to corrupt the data structure.) s
381 238 M
(  3\)  There are no asymptotic limits on running time.  However, part of your) s
381 230 M
(      job is to avoid using inefficient algorithms and data structures.  If) s
381 222 M
(      your MachinePlayer takes much longer than 5 seconds to search to a depth) s
381 214 M
(      of two on a Soda lab machine, we will scrutinize your submission for) s
381 206 M
(      inefficient algorithms and data structures.) s
381 198 M
(  4\)  You should have divided up the tasks into well-defined modules in your) s
381 190 M
(      GRADER file and in your software.) s
381 182 M
(  5\)  We will deduct points for code that does not match the following style) s
381 174 M
(      guidelines.) s
381 158 M
(  - Classes that contain extraneous debugging code, print statements, or) s
381 150 M
(    meaningless comments that make the code hard to read will be penalized.) s
381 142 M
(    \(It's okay to have methods whose sole purpose is to contain lots of) s
381 134 M
(    debugging code, so long as your comments inform the reader who grades your) s
381 126 M
(    project that he can skip those methods.  These methods should not contain) s
381 118 M
(    anything necessary to the functioning of your project.\)) s
381 110 M
(  - Your file should be indented in the manner enforced by Emacs \(e.g., a) s
381 102 M
(    two-space or four-space indentation inside braces\), and used in the lecture) s
381 94 M
(    notes throughout the semester.  The indentation should clearly show the) s
381 86 M
(    structure of nested statements like loops and if statements.  Sloppy) s
381 78 M
(    indentation will be penalized.) s
381 70 M
(  - All if, else, while, do, and for statements should use braces.  \(Ask me if) s
381 62 M
(    you want to know why.\)) s
381 54 M
(  - All classes start with a capital letter, all methods and \(non-final\) data) s
381 46 M
(    fields start with a lower case letter, and in both cases, each new word) s
381 38 M
(    within the name starts with a capital letter.  Constants \(final fields\) are) s
381 30 M
(    all capital letters only.) s
381 22 M
(  - Numerical constants with special meaning should always be represented by) s
381 14 M
(    all-caps "final static" constants.) s
381 6 M
(  - All class, method, field, and variable names should be meaningful to a) s
_R
S
%%Page: (5) 5
%%BeginPageSetup
_S
90 rotate
20 -592 translate
/pagenum 5 def
/fname (readme) def
/fdir () def
/ftail (readme) def
% User defined strings:
/pagenumstr (5) def
/moddatestr (10/06/10) def
/modtimestr (01:14:19) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
column_lines
do_header
5 526 M
(    human reader.) s
5 518 M
(  - Methods should not exceed about 100 lines.  Any method that long can) s
5 510 M
(    probably be broken up into logical pieces.  The same is probably true for) s
5 502 M
(    any method that needs more than 8 levels of indentation.) s
5 494 M
(  - Avoid unnecessary duplicated code; if you use the same \(or very similar\)) s
5 486 M
(    fifteen lines of code in two different places, those lines should probably) s
5 478 M
(    be a separate method call.) s
5 470 M
(  - Programs should be easy to read.) s
5 454 M
(Finally, we will be looking at your code to see whether you have implemented) s
5 446 M
(minimax game tree search, and whether you use alpha-beta pruning.) s
_R
S
%%Trailer
%%Pages: 5
%%DocumentNeededResources: font Times-Roman Courier-Bold Courier 
%%+ font Times-Bold 
%%EOF
